import type { NextPage } from 'next';
import Head from 'next/head';
import { PublicKey } from '@solana/web3.js';
import { useCallback } from 'react';
import { TOKEN_PROGRAM_ID } from '@solana/spl-token';
import { WalletNotConnectedError } from '@solana/wallet-adapter-base';
import { useWallet, useConnection } from '@solana/wallet-adapter-react';
import { Program, Provider, BN, web3 } from '@project-serum/anchor';
import {
  WalletDisconnectButton,
  WalletMultiButton,
} from '@solana/wallet-adapter-react-ui';

import idl from '../idl/olympuspro_sol.json';
import SolanaUtils, { addresses } from '../utils/solana';

const programID = new PublicKey('61ZYzDJWf1KXdU6aEm6JEyE1z5Vjp3KHRSiKw9GAZaXp');

const Home: NextPage = () => {
  const { connection } = useConnection();
  const { publicKey, wallet, signTransaction }: any = useWallet();

  const purchaseBond = useCallback(async () => {
    if (!publicKey) throw new WalletNotConnectedError();

    const provider = new Provider(connection, wallet as any, {});
    const program = new Program(idl as any, programID, provider);

    const bond = web3.Keypair.generate();
    const nftMint = web3.Keypair.generate();
    const nftToken = web3.Keypair.generate();

    const utils = new SolanaUtils(program);
    const [bondAccount] = await utils.getBondAccount(bond);
    const [payoutAccount] = await utils.getDaoPayoutAccount();
    const [tokenAuthority] = await utils.getTokenAuthority();
    const [daoPayoutAccount] = await utils.getDaoPayoutAccount();
    const [principalAccount] = await utils.getPrincipalAccount();
    const [daoPrincipalAccount] = await utils.getDaoPrincipalAccount();

    const tx = await program.transaction.bonderDeposit(
      new BN(100),
      new BN(100000000),
      {
        accounts: {
          authority: publicKey,
          payoutMint: new PublicKey(addresses.tokenAMint),
          principalMint: new PublicKey(addresses.tokenBMint),
          tokenAccount: new PublicKey(addresses.olympusTokenB),
          treasury: new PublicKey(addresses.treasury),
          bond: bond.publicKey,
          bondAccount,
          payoutAccount,
          tokenAuthority,
          daoPayoutAccount,
          daoPrincipalAccount,
          principalAccount,
          payer: publicKey,
          nftMint: nftMint.publicKey,
          nftToken: nftToken.publicKey,
          bonder: new PublicKey(addresses.bonder),
          systemProgram: web3.SystemProgram.programId,
          clock: web3.SYSVAR_CLOCK_PUBKEY,
          rent: web3.SYSVAR_RENT_PUBKEY,
          tokenProgram: TOKEN_PROGRAM_ID,
        },
      },
    );

    tx.feePayer = publicKey;
    tx.recentBlockhash = (await connection.getRecentBlockhash()).blockhash;
    const signedTx = await signTransaction(tx);
    console.log('signedTransaction', signedTx);
    const txid = await connection.sendRawTransaction(signedTx.serialize());
    await connection.confirmTransaction(txid);
  }, [publicKey, connection, wallet]);

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="terra-wallet" />
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <WalletMultiButton />
      <WalletDisconnectButton />
      <button onClick={() => purchaseBond()}>Purchase Bond</button>
    </div>
  );
};

export default Home;
